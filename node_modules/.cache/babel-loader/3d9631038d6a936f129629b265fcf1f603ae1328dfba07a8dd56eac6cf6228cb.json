{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Uday Shreemali\\\\Desktop\\\\frontevent\\\\src\\\\Exercise\\\\Stateex.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stateex() {\n  _s();\n  var _data$find;\n  // Initial data\n  const data = [{\n    state: \"Gujarat\",\n    city: [\"Rajkot\", \"Ahmedabad\"]\n  }, {\n    state: \"Rajashthan\",\n    city: [\"Jaipur\", \"Ajmer\"]\n  }, {\n    state: \"Maharashtra\",\n    city: [\"Pune\", \"Mumbai\"]\n  }];\n\n  // State to keep track of selected state and city\n  const [selectedState, setSelectedState] = useState('Gujarat'); // Default to Gujarat\n  const [selectedCity, setSelectedCity] = useState('');\n\n  // Extract state names from data\n  const stateOptions = data.map(d => d.state);\n\n  // Find the cities for the selected state\n  const cities = ((_data$find = data.find(d => d.state === selectedState)) === null || _data$find === void 0 ? void 0 : _data$find.city) || [];\n\n  // Set default city if there are cities available\n  React.useEffect(() => {\n    if (cities.length > 0 && !selectedCity) {\n      setSelectedCity(cities[0]); // Select the first city by default\n    }\n  }, [selectedState, cities, selectedCity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select State and City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedState,\n      onChange: e => {\n        setSelectedState(e.target.value);\n        setSelectedCity(''); // Reset city when state changes\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), stateOptions.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: state,\n        children: state\n      }, state, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: e => setSelectedCity(e.target.value),\n      disabled: !selectedState // Disable city dropdown if no state is selected\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), cities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: city,\n        children: city\n      }, city, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), selectedState && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Selected State: \", selectedState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), selectedCity && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected City: \", selectedCity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Stateex, \"ewGN/QPmO2vcO4Y/oIXcllLUkOA=\");\n_c = Stateex;\nexport default Stateex;\nvar _c;\n$RefreshReg$(_c, \"Stateex\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Stateex","_s","_data$find","data","state","city","selectedState","setSelectedState","selectedCity","setSelectedCity","stateOptions","map","d","cities","find","useEffect","length","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Uday Shreemali/Desktop/frontevent/src/Exercise/Stateex.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Stateex() {\r\n  // Initial data\r\n  const data = [\r\n    { state: \"Gujarat\", city: [\"Rajkot\", \"Ahmedabad\"] },\r\n    { state: \"Rajashthan\", city: [\"Jaipur\", \"Ajmer\"] },\r\n    { state: \"Maharashtra\", city: [\"Pune\", \"Mumbai\"] }\r\n  ];\r\n\r\n  // State to keep track of selected state and city\r\n  const [selectedState, setSelectedState] = useState('Gujarat'); // Default to Gujarat\r\n  const [selectedCity, setSelectedCity] = useState('');\r\n\r\n  // Extract state names from data\r\n  const stateOptions = data.map(d => d.state);\r\n\r\n  // Find the cities for the selected state\r\n  const cities = data.find(d => d.state === selectedState)?.city || [];\r\n\r\n  // Set default city if there are cities available\r\n  React.useEffect(() => {\r\n    if (cities.length > 0 && !selectedCity) {\r\n      setSelectedCity(cities[0]); // Select the first city by default\r\n    }\r\n  }, [selectedState, cities, selectedCity]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Select State and City</h1>\r\n      \r\n      {/* Dropdown for states */}\r\n      <select\r\n        value={selectedState}\r\n        onChange={(e) => {\r\n          setSelectedState(e.target.value);\r\n          setSelectedCity(''); // Reset city when state changes\r\n        }}\r\n      >\r\n        <option value=\"\">Select State</option>\r\n        {stateOptions.map(state => (\r\n          <option key={state} value={state}>\r\n            {state}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Dropdown for cities */}\r\n      <select\r\n        value={selectedCity}\r\n        onChange={(e) => setSelectedCity(e.target.value)}\r\n        disabled={!selectedState} // Disable city dropdown if no state is selected\r\n      >\r\n        <option value=\"\">Select City</option>\r\n        {cities.map(city => (\r\n          <option key={city} value={city}>\r\n            {city}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Display selected state and city */}\r\n      {selectedState && (\r\n        <div>\r\n          <h2>Selected State: {selectedState}</h2>\r\n          {selectedCity && <h3>Selected City: {selectedCity}</h3>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stateex;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}